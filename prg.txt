Water Jug

def w(j1,j2,t):
 s=[(0,0)];v=set()
 while s:
  a,b=s.pop()
  print(f"{a},{b}")
  if a==t or b==t:return 1
  if (a,b)in v:continue
  v.add((a,b));m=min
  s+=[(j1,b),(a,j2),(0,b),(a,0),(a-m(a,j2-b),b+m(a,j2-b)),(a+m(b,j1-a),b-m(b,j1-a))]
 print("No sol")
w(4,3,2)

-------------------------------------------------------------------------------
Cannibals and Missionaries

from collections import deque
v=lambda s:all(x>=0 for x in s)and(s[0] in [0,s[0]>=s[1]])and(s[3] in [0,s[3]>=s[4]])
n=lambda s:[(s[0]-x,s[1]-y,0,s[3]+x,s[4]+y)if s[2]else(s[0]+x,s[1]+y,1,s[3]-x,s[4]-y)for x,y in[(1,0),(2,0),(0,1),(0,2),(1,1)]if v((s[0]-x,s[1]-y,0,s[3]+x,s[4]+y))if s[2]else v((s[0]+x,s[1]+y,1,s[3]-x,s[4]-y))]
def f(a,b):
 q=deque([(a,[a])]);V=set()
 while q:
  s,p=q.popleft()
  if s==b:return p
  if s in V:continue
  V|={s}
  q.extend((u,p+[u])for u in n(s))
S,G=(3,3,1,0,0),(0,0,0,3,3)
for i in f(S,G):print(i)

-------------------------------------------------------------------------------
N Queen

def solve(n,a=[]):
 if len(a)==n:
  for r in a: print(''.join('Q'if i==r else'.'for i in range(n)))
  exit()
 for i in range(n):
  if all(i!=c and abs(len(a)-j)!=abs(i-c) for j,c in enumerate(a)):
   solve(n,a+[i])
solve(int(input("Enter N: ")))

-------------------------------------------------------------------------------
TSP

from itertools import permutations

g = [[0,2,9,10],[1,0,6,4],[15,7,0,8],[6,3,12,0]]
n = len(g)
best = min(((sum(g[p[i]][p[i+1]] for i in range(n-1)) + g[p[-1]][p[0]], p) 
           for p in permutations(range(n))), key=lambda x: x[0])
print("Path:", list(best[1]) + [best[1][0]], "\nCost:", best[0])

-------------------------------------------------------------------------------
Game

import random
print("Guess a number between 1 and 5")
if int(input()) == random.randint(1,5):
    print("You won!")
else:
    print("Try again!")

-------------------------------------------------------------------------------
Forward Chaining

facts = [['croaks','frog'],['eatsflies','frog'],['frog','green'],
         ['chirps','canary'],['sing','canary'],['canary','yellow']]

def fwd(start, facts):
    r, v, q = [], set(), list(start)
    while q:
        x = q.pop()
        if x in v: continue
        v.add(x)
        for a,b in facts:
            if a == x and [a,b] not in r:
                r.append([a,b])
                q.append(b)
    return r

print(fwd(['croaks'], facts))

-------------------------------------------------------------------------------
FOPL

from sympy import symbols, to_dnf, to_cnf
from sympy.logic.boolalg import Or, And, Not

A, B, C, D = symbols('A B C D')

expr = Or(And(A, B), C, D)

dnf_form = to_dnf(expr, simplify=True)
cnf_form = to_cnf(expr, simplify=True)

print("DNF:", dnf_form)
print("CNF:", cnf_form)
