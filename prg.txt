Program-6 dj

#include <stdio.h>
#include <limits.h>
#define MAX 100

int minDistance(int dist[], int visited[], int n) {
    int min = INT_MAX, idx = -1;
    for (int i = 0; i < n; i++)
        if (!visited[i] && dist[i] <= min)
            min = dist[i], idx = i;
    return idx;
}

void printSolution(int dist[], int n, int src) {
    printf("\nShortest distances from vertex %d:\n", src);
    for (int i = 0; i < n; i++)
        printf("To %d = %d\n", i, dist[i]);
}

void dijkstra(int graph[MAX][MAX], int src, int n) {
    int dist[MAX], visited[MAX] = {0};
    for (int i = 0; i < n; i++) dist[i] = INT_MAX;
    dist[src] = 0;

    for (int count = 0; count < n - 1; count++) {
        int u = minDistance(dist, visited, n);
        visited[u] = 1;
        for (int v = 0; v < n; v++)
            if (!visited[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }
    printSolution(dist, n, src);
}

int main() {
    int graph[MAX][MAX], n, src;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);
    printf("Enter source vertex: ");
    scanf("%d", &src);
    dijkstra(graph, src, n);
    return 0;
}

-------------------------------------------------------------------------------
Program-7 dfs

#include <stdio.h>
#define MAX 100

int graph[MAX][MAX], visited[MAX], stack[MAX], top = -1;

void dfs(int v, int n) {
    visited[v] = 1;
    for (int i = 0; i < n; i++)
        if (graph[v][i] && !visited[i])
            dfs(i, n);
    stack[++top] = v;
}

void topologicalSort(int n) {
    for (int i = 0; i < n; i++) visited[i] = 0;
    for (int i = 0; i < n; i++)
        if (!visited[i])
            dfs(i, n);
    printf("\nTopological Order:\n");
    while (top != -1) printf("%d ", stack[top--]);
    printf("\n");
}

int main() {
    int n;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);
    topologicalSort(n);
    return 0;
}

-------------------------------------------------------------------------------
Program-8 knap

#include <stdio.h>
int max(int a, int b) { return (a > b) ? a : b; }

int knapsack(int W, int wt[], int val[], int n) {
    int K[n + 1][W + 1];
    for (int i = 0; i <= n; i++)
        for (int w = 0; w <= W; w++)
            K[i][w] = (i == 0 || w == 0) ? 0 :
                      (wt[i - 1] <= w ? max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]) : K[i - 1][w]);
    return K[n][W];
}

int main() {
    int n, W;
    printf("Enter number of items: ");
    scanf("%d", &n);
    int val[n], wt[n];
    printf("Enter item values:\n");
    for (int i = 0; i < n; i++) scanf("%d", &val[i]);
    printf("Enter item weights:\n");
    for (int i = 0; i < n; i++) scanf("%d", &wt[i]);
    printf("Enter knapsack capacity: ");
    scanf("%d", &W);
    printf("Maximum value = %d\n", knapsack(W, wt, val, n));
    return 0;
}

-------------------------------------------------------------------------------
Program-9 sum

#include <stdio.h>
#include <stdbool.h>

bool subset[101][1001]; // Assumes max n=100, sum=1000

void printSubset(int set[], int n, int sum) {
    printf("Subset found: ");
    while (n > 0 && sum > 0) {
        if (subset[n][sum] && !subset[n - 1][sum]) {
            printf("%d ", set[n - 1]);
            sum -= set[n - 1];
        }
        n--;
    }
    printf("\n");
}

bool isSubsetSum(int set[], int n, int sum) {
    for (int i = 0; i <= n; i++) subset[i][0] = true;
    for (int j = 1; j <= sum; j++) subset[0][j] = false;

    for (int i = 1; i <= n; i++)
        for (int s = 1; s <= sum; s++)
            subset[i][s] = (set[i - 1] > s) ? subset[i - 1][s] :
                           (subset[i - 1][s] || subset[i - 1][s - set[i - 1]]);

    if (subset[n][sum]) {
        printSubset(set, n, sum);
        return true;
    }
    return false;
}

int main() {
    int n, sum;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int set[n];
    printf("Enter elements:\n");
    for (int i = 0; i < n; i++) scanf("%d", &set[i]);
    printf("Enter target sum: ");
    scanf("%d", &sum);

    if (!isSubsetSum(set, n, sum))
        printf("No subset with the given sum found.\n");
    return 0;
}

-------------------------------------------------------------------------------
Program-10 queen

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#define MAX 20

int board[MAX];

bool isSafe(int row, int col) {
    for (int i = 0; i < row; i++)
        if (board[i] == col || abs(board[i] - col) == abs(i - row))
            return false;
    return true;
}

void printSolution(int n) {
    printf("One of the solutions:\n");
    for (int i = 0; i < n; i++, printf("\n"))
        for (int j = 0; j < n; j++)
            printf(board[i] == j ? "Q " : ". ");
}

bool solveNQueens(int row, int n) {
    if (row == n) {
        printSolution(n);
        return true;
    }
    for (int col = 0; col < n; col++) {
        if (isSafe(row, col)) {
            board[row] = col;
            if (solveNQueens(row + 1, n))
                return true;
        }
    }
    return false;
}

int main() {
    int n;
    printf("Enter number of queens (1-%d): ", MAX);
    scanf("%d", &n);
    if (n < 1 || n > MAX) {
        printf("Invalid input.\n");
        return 1;
    }
    if (!solveNQueens(0, n))
        printf("No solution exists for N = %d\n", n);
    return 0;
}
