1.Illustration of Where Clause, AND, OR operations in MongoDB.
Execute the Commands of MongoDB and operations in MongoDB: 
Insert, Query, Update, Delete and Projection. (Note: use any collection) 

use ProgrammingBooks

db.createCollection("BookDetails")



db.BookDetails.find()

db.BookDetails.find({
  $and: [
    { category: "Software Development" },
    { year: 2008 }
  ]
})
==========================
db.students.insertOne({ name: "Aadishesh", age: 20, branch: "AI" }) //insert
db.students.find({ name: "Aadishesh" }) //query
db.students.updateOne({ name: "Aadishesh" }, { $set: { age: 21 } }) //update
db.students.deleteOne({ name: "Aadishesh" }) //delete
db.students.find({}, { name: 1, branch: 1, _id: 0 }) //projection

-------------------------------------------------------------------------------
2.Develop a MongoDB query to select certain fields and ignore some 
fields of the documents from any collection. 
Develop a MongoDB query to display the first 5 documents from the results 
obtained.[use of limit and find] 

db.BookDetails.insertOne({
  _id: 1,
  title: "Clean Code",
  author: "Robert C. Martin",
  category: "Software Development",
  year: 2008
})

db.BookDetails.find({ },{category:1,title:1,price:0})
=======
db.BookDetails.find().limit(5)

-------------------------------------------------------------------------------
3.Execute query selectors (comparison selectors, logical selectors ) and list 
out the results on any collection 

db.Employees.insertMany([ 
                          { name: "Alice", age: 30, department: "HR", salary: 50000, 
                                                    joinDate: new Date("2015-01-15") }, 
db.Employees.find({ age: { $gt: 30 } }) , $it, $ite, $gte //comparision
db.Employees.find({ $or: [ { department: "HR" }, { salary: { $lt: 60000 } } ] }) ,$and, $nor //logical
db.employees.insertMany([ { name: "Alice", flags: 1 } , 
db.employees.find({ flags: { $bitsAllSet: 1 } }) , $bitalllclear //bitwise
========
db.Places.createIndex({ location: "2dsphere" })
db.Places.find({ 
  location: { 
    $near: { 
      $geometry: { 
        type: "Point", //polygon
        coordinates: [-73.9851, 40.7580] 
      }, 
      $maxDistance: 5000 
    } 
  } 
}).pretty( ) 

-------------------------------------------------------------------------------
4.Create and demonstrate how projection operators ($, $elematch and $slice) 
would be used in the MongoDB. 

db.Products.insertMany([ 
  { 
    name: "Laptop", 
    brand: "BrandA", 
    features: [ 
      { name: "Processor", value: "Intel i7" }, 
      { name: "RAM", value: "16GB" }, 
      { name: "Storage", value: "512GB SSD" } 
    ], 
    reviews: [ 
      { user: "Alice", rating: 5, comment: "Excellent!" }, 
      { user: "Bob", rating: 4, comment: "Very good" }, 
      { user: "Charlie", rating: 3, comment: "Average" } 
    ] 
  }, 

db.Products.find(  //$
  { name: "Laptop", "reviews.user": "Alice" },
  { "reviews.$": 1 }
)

db.Products.find( //$elematch
  { name: "Laptop" },
  { reviews: { $elemMatch: { rating: { $gt: 4 } } } }
)

db.Products.find( //$slice
  { name: "Smartphone" },
  { reviews: { $slice: 1 } }
)

-------------------------------------------------------------------------------
5.Execute Aggregation operations ($avg, $min,$max, $push, $addToSet etc.). students 
encourage to execute several queries to demonstrate various aggregation operators)

db.Sales.insertMany([  
{ date: new Date("2024-01-01"), product: "Laptop", price: 1200, quantity: 1, customer: "Amar" },

db.Sales.aggregate([ { $group: { _id: "$product", averagePrice: { $avg: "$price" } } } ]).pretty( ) //minprice: $min, //maxprice: $max

-------------------------------------------------------------------------------
6.Execute Aggregation Pipeline and its operations (pipeline must contain $match, $group, 
$sort, $project,$skip etc. students encourage to execute several queries to demonstrate 
various aggregation operators)

db.restaurants.insertMany([ 
  { 
    name: "Biryani House", 
    cuisine: "Indian", 
    location: "Jayanagar", 
    reviews: [ 
      { user: "Aarav", rating: 5, comment: "Amazing biryani!" }, 
      { user: "Bhavana", rating: 4, comment: "Great place!" } 
    ] 
  },

db.restaurants.aggregate([ 
  { 
    $match: { 
      "location": "Jayanagar" 
    } 
  }, 
  { 
    $unwind: "$reviews"   
  }, 
  { 
    $group: { 
      _id: "$name", 
      averageRating: { $avg: "$reviews.rating" }, 
      totalReviews: { $sum: 1 } 
    } 
  }, 

-------------------------------------------------------------------------------
7.. Find all listings with listing_url, name, address, host_picture_url in the listings And 
Reviews collection that have a host with a picture url 
Using E-commerce collection write a query to display reviews summary.

db.listingsAndReviews.insertMany([ 
  { 
    listing_url: "http://www.example.com/listing/123456", 
    name: "Beautiful Apartment", 
    address: { 
      street: "123 Main Street", 
      suburb: "Central", 
      city: "Metropolis", 
      country: "Wonderland" 
    }, 
    host: { 
      name: "Alice", 
      picture_url: "http://www.example.com/images/host/host123.jpg" 
    } 
  }, 

db.listingsAndReviews.find( 
  { 
    "host.picture_url": { $exists: true, $ne: "" } 
  }, 
  { 
    "host.picture_url": 1 
  } 
).pretty() 
========
db.products.aggregate([ 
  { 
    $unwind: "$reviews" 
  }, 
  { 
    $group: { 
      _id: "$name", 
      totalReviews: { $sum: 1 }, 
      averageRating: { $avg: "$reviews.rating" }, 
      comments: { $push: "$reviews.comment" } 
    } 
  }, 

-------------------------------------------------------------------------------
8.Demonstrate creation of different types of indexes on collection 
(unique, sparse, compound and multikey indexes) 
 Demonstrate optimization of queries using indexes. 

db.employees.insertMany([ 
{ name: "Alice", email: "alice@example.com", dept: "HR", skills: ["communication", "leadership"] 
},

>db.employees.createIndex({ email: 1 }, { unique: true }) //sparse
========
db.products.insertMany([ 
 { name: "Laptop", category: "Electronics", price: 1000, stock: 10 },

db.products.find({ category: "Electronics", price: { $lt: 600 } }).explain("executionStats") 
db.products.createIndex({ category: 1, price: 1 }) 
db.products.find({ category: "Electronics", price: { $lt: 600 } }).explain("executionStats"). 
executionStats. totalDocsExamined 

-------------------------------------------------------------------------------
9.Develop a query to demonstrate Text search using catalog data collection 
for a given word 
 Develop queries to illustrate excluding documents with certain words and 
phrases 

db.catalog.countDocuments( ) 
db.catalog.createIndex({name: "text", genre: "text"}) 
db.catalog.find({$text: {$search: "maga"}})  
=================
db.catalog.find({ $text: { $search: "crime romance -action" }, year:2021 } ) 

-------------------------------------------------------------------------------
10.Develop an aggregation pipeline to illustrate Text search on Catalog data 
collection. 

db.Catalog.createIndex({ title: "text", description: "text" })
db.Catalog.aggregate([
  { $match: { $text: { $search: "laptop" } } },
  { $project: { title: 1, score: { $meta: "textScore" } } },
  { $sort: { score: -1 } }
])
